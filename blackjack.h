// Programmer: Hariswar Baburaj
// Date: 04/22/2024
// File: blackjack.h
// Asignmnet: Homework5.cpp
// Purpose: Defines the functions that is necessary for implementing the game.

#ifndef BLACKJACK_H
#define BLACKJACK_H

#include <string>
using namespace std;

const int MIN = 1;
const int MAX = 13;

struct card
{
  int value;
  int valueForsuit;
  string suit;
  int num;
  string name;
};
// Description: Overloaded insertion operator for printing card details to an output stream.
// Pre: The card struct must have valid name.
// Post: The card's name and suit have been written to the output stream.
ostream &operator<<(ostream &os, const card &card);

// Description: Overloading the "<" operator to compare the order
// Pre: The card struct must have valid "valueForsuit" and "num".
// Post: Returns true if the first card is considered less than the second card based on suit and number. If not, returns false.
bool operator<(const card &first_card, const card &second_card);

// Description: This function assigns a value to each suit.
// Pre: The input string suit must be a valid suit name.
// Post: Returns the value based on the provided suit.
int generateValueforSuit(const string suit);

// Description: This function generates a random card value between min and max
// Pre: Min and Max have to be constant.
// Post: returns a random card value.
int generateRandomCard(const int min, const int max);

// Description: This function prints hand for both dealer's and player's.
// Pre: The 'hand' array must contain valid card. The 'size_of_hand' parameter must indicate the number of cards in the hand.
// Post: The sorted hand is printed.
void printHand(struct card hand[], const int size_of_hand);

// Description: This function generates a random suit for the card.
// Pre: None
// Post: Returns the randomly generated suit as a string.
string generatefourCardSuit();

// Description: This function checks if the player's and dealer's hand is blackjack.
// Pre: None
// Post: Returns true if the hand is a Blackjack, false otherwise.
bool isBlackjack(int handTotal);

// Description: This function generates the style of the card based on its value.
// Pre: The function Cardvalue represents a card value between 1 to 13.
// Post: It returns the style of the card as a string.
string generateCardStyles(const int cardValue);

// Description: The function generates number of the card
// Pre: The parameter cardvalue represents a value between 1 to 13 and must be a constant.
// Post: Returns the nuber of the card based on the value of cardValue.
int getCardNum(const int cardValue);

// Description: This function generates the computer advice that is generated by the computer.
// Pre: None
// Post: Returns a string of the optimal action for the player based on luck and the current game scenario.
template <typename T> // This is the template function.
string adviseOptimalActionOnLuck(const T probability_threshold,
                                 const int playercard_1, const int playercard_2,
                                 const int playerTotal,
                                 const int dealerUpCard)
{
  int first_total = 0, second_total = 0;

  int chances = (rand() % 100) + 1;
  if (chances < probability_threshold)
  {
    if (playercard_1 == 1)
    {
      first_total = getCardNum(playercard_2) + 1;
      second_total = getCardNum(playercard_2) + 11;
    }
    else if (playercard_2 == 1)
    {
      first_total = getCardNum(playercard_1) + 1;
      second_total = getCardNum(playercard_2) + 11;
    }

    if (first_total >= 17 && second_total <= 16)
    {
      return "The game advices you to Stand";
    }
    else if (((first_total >= 12 && first_total <= 16) ||
              (second_total >= 12 && second_total <= 16)) &&
             (dealerUpCard < 7))
    {
      return "The game advices you to Stand";
    }
    else if ((first_total >= 9 && first_total <= 11) ||
             (second_total >= 9 && second_total <= 11))
    {
      return "The game advices you to Double Down";
    }
    else
    {
      return "The game advices you to Hit";
    }

    if (playerTotal <= 11)
    {
      if (playerTotal >= 9)
      {
        return "The game advices you to Double Down";
      }
      else
      {
        return "The game advices you to Hit";
      }
    }
    else if (playerTotal >= 12 && playerTotal <= 16)
    {
      if (dealerUpCard >= 7)
      {
        return "The game advices you to Hit";
      }
      else
      {
        return "The game advices you to Stand";
      }
    }
    else
    {
      return "The game advices you to Stand";
    }
  }
  else
  {
    switch (rand() % 3)
    {
    case 0:
      return "The game advices you to Hit";
    case 1:
      return "The game advices you to Stand";
    default:
      return "The game advices you to Double Down";
    }
  }
}
// Description: This function generates a valid card which the suit and the card number will be always different/unique.
// Pre: The minimumcard and maximumcard have to int and two card arrays.
// Post: Generates a random card for the player and dealer.
card Card_is_Valid(const int minimumcard, const int maximumcard, struct card Player_hand[17], struct card Dealer_hand[17]);

// Description: This function updates balances based on the game scenerio.
// Pre: Includes all the parameter that needs to there in order for this function to work.
// Post: It updates the player balance based on the dealer or player's win/loss situations.
void updatePlayerBalance(const string message, double &normal_balance,
                         const double playerwager, const char choosing_option,
                         const string computer_advice);

// Description: This function displays the outcome of the game and updates the
// balance.
// Pre: Parameters like "message", "money_update" and new_balance will taken as input to validate this function.
// Post: Return's the winner or looses.based on the way player won or lost and updates the balance based on the game
// scenerio.

void displayOutcome(const string message, const double money_update,
                    const double New_balance);

// Description: This function displays the overall game summary of the rounds played.
// Pre: Includes all the parameters representing each variables that's important for the game.
// Post: return's the value of losses, win's and other stuff of the overall rounds that was played.
void displayGameSummary(const int num_of_rounds, const int Winforblackjack,
                        const int Lossforblackjack, const int Tieforblackjack,
                        const int losses, const int wins, const int ties,
                        const double playerbalance,
                        const double overallbalance);

#endif
